parameters:
  - name: image
    displayName: Pool Image
    default: ubuntu-latest
    values:
    - windows-latest
    - vs2017-win2016
    - ubuntu-latest
    - ubuntu-16.04
    - macOS-latest
    - macOS-10.14
  - name: env
    values:
    - dev
    - qa
  - name: createnamespace
    type: boolean
  - name: createstorageclass
    type: boolean
  - name: createsecret
    type: boolean
  - name: registry
    default: contentapp
    type: string
  - name: storageaccount
    default: terracloudlog
    type: string
  - name: conn
    default: serviceaccount
    displayName: Kubernetes connection

trigger: none

stages:
  - stage: GolangBuild
    displayName: Build golang application
    jobs:
      - job: DockerBuild
        displayName: Build docker image
        pool:
          vmImage: ${{ parameters.image }}
        steps:
          - checkout: self
          - task: Docker@2
            displayName: buildAndPush
            inputs:
              containerRegistry: ${{ parameters.registry }}
              repository: terracloud
  - stage: DeployBackend
    displayName: Deploy into AKS
    jobs:
    - deployment: Deploy
      environment: ${{ parameters.env }}
      variables:
        - name: imagetag
          value: $(Build.BuildId)
      pool:
        vmImage: ${{ parameters.image }}
      strategy:
        runOnce:
          deploy:
            steps:
              - task: AzureKeyVault@1
                inputs:
                  azureSubscription: 'aksspn'
                  KeyVaultName: 'akskeyvaultcsi'
                  SecretsFilter: 'userToken'
                  RunAsPreJob: true
              - template: kubedeploy.yml
                parameters:
                  k8sconn: ${{ parameters.conn }}
                  createnamespace: ${{ parameters.createnamespace }}
                  createsecret: ${{ parameters.createsecret }}
                  createstorageclass: ${{ parameters.createstorageclass }}
                  env: ${{ parameters.env }}
                  imagetag: $(imagetag)
                  registry: ${{ parameters.registry }}
                  token: $(usertoken)
                  storageaccount: ${{ parameters.storageaccount }}
              - template: apitesting.yml
                parameters:
                  env: ${{ parameters.env }}