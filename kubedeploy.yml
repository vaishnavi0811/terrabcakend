parameters:
  - name: k8sconn
  - name: createnamespace
  - name: createsecret
  - name: createstorageclass
  - name: env
  - name: imagetag
  - name: registry
  - name: token
  - name: storageaccount

steps:
  - checkout: self
  - task: Kubernetes@1
    condition: eq('${{ parameters.createnamespace }}', true)
    displayName: 'create namespace'
    inputs:
      kubernetesServiceEndpoint: '${{ parameters.k8sconn }}'
      command: create
      arguments: 'namespace terra${{ parameters.env }}'
  - task: Kubernetes@1
    displayName: 'create secret'
    condition: eq('${{ parameters.createsecret }}', true)
    inputs:
      kubernetesServiceEndpoint: '${{ parameters.k8sconn }}'
      command: create
      arguments: ' secret generic secrets-store-creds --from-literal=terraformtoken=${{ parameters.token }} -n terra${{ parameters.env }} '
  - task: PowerShell@2
    displayName: 'convert params to vars'
    inputs:
      targetType: filePath
      filePath: ./convertvars.ps1
      arguments: '-env ${{ parameters.env }} -imagetag ${{ parameters.imagetag }} -registry ${{ parameters.registry }} -storageaccount ${{ parameters.storageaccount }}'
  - powershell: |
      get-content variables.json
    displayName: 'PowerShell Script'
  - task: qetza.replacetokens.replacetokens-task.replacetokens@3
    displayName: 'Replace tokens in deployment yml'
    inputs:
      targetFiles: '**/deployterra.yml,**/storageclass.yml,**/scpvc.yml'
      tokenPrefix: '${'
      tokenSuffix: '}'
      variableFiles: '**/variables.json'
  - powershell: |
      get-content storageclass.yml
    displayName: 'PowerShell Script'
  - task: Kubernetes@1
    displayName: "Create Storage class"
    condition: eq('${{ parameters.createstorageclass }}', true)
    inputs:
      kubernetesServiceEndpoint: serviceaccount
      command: apply
      useConfigurationFile: true
      configuration: storageclass.yml
      arguments: ' -n terra${{ parameters.env }}'
  - task: Kubernetes@1
    displayName: "Create pv claim"
    condition: eq('${{ parameters.createstorageclass }}', true)
    inputs:
      kubernetesServiceEndpoint: serviceaccount
      command: apply
      useConfigurationFile: true
      configuration: scpvc.yml
      arguments: ' -n terra${{ parameters.env }}'
  - task: Kubernetes@1
    displayName: "Apply terracloud"
    inputs:
      kubernetesServiceEndpoint: serviceaccount
      command: apply
      useConfigurationFile: true
      configuration: deployterra.yml
      arguments: ' -n terra${{ parameters.env }}'